simple
required_capability: date_nanos_type

FROM date_nanos | SORT millis DESC | KEEP millis, nanos | LIMIT 1;

millis:date              | nanos:date_nanos
2023-10-23T13:55:01.543Z | 2023-10-23T13:55:01.543123456Z
;

sort by nanos
required_capability: date_nanos_type

FROM date_nanos | SORT nanos DESC | KEEP millis, nanos | LIMIT 1;

millis:date              | nanos:date_nanos
2023-10-23T13:55:01.543Z | 2023-10-23T13:55:01.543123456Z
;

sort by nanos asc
required_capability: date_nanos_type

FROM date_nanos | WHERE millis > "2020-02-02" | SORT nanos ASC | KEEP millis, nanos | LIMIT 1;

millis:date              | nanos:date_nanos
2023-10-23T12:15:03.360Z | 2023-10-23T12:15:03.360103847Z
;

mv_max on date nanos
required_capability: date_nanos_type

FROM date_nanos | SORT millis ASC | EVAL nanos = MV_MAX(nanos) | KEEP nanos | LIMIT 1;


nanos:date_nanos
2023-03-23T12:15:03.360103847Z
;

mv_min on date nanos
required_capability: date_nanos_type

FROM date_nanos | SORT millis ASC | EVAL nanos = MV_MIN(nanos) | KEEP nanos | LIMIT 1;

nanos:date_nanos
2023-01-23T13:55:01.543123456Z
;

mv_count on date nanos
required_capability: date_nanos_type

FROM date_nanos | SORT millis ASC | EVAL ct = MV_COUNT(nanos) | KEEP ct | LIMIT 1;

ct:integer
3
;

mv_first on date nanos
required_capability: date_nanos_type

FROM date_nanos | SORT millis ASC | EVAL nanos = MV_FIRST(nanos) | KEEP nanos | LIMIT 1;

nanos:date_nanos
2023-01-23T13:55:01.543123456Z
;

mv_last on date nanos
required_capability: date_nanos_type

FROM date_nanos | SORT millis asc | EVAL nanos = MV_LAST(nanos) | KEEP nanos | LIMIT 1;

nanos:date_nanos
2023-03-23T12:15:03.360103847Z
;

string to date nanos
required_capability: date_nanos_type

ROW d = TO_DATE_NANOS("2023-03-23T12:15:03.360103847") | KEEP d;

d:date_nanos
2023-03-23T12:15:03.360103847Z
;

string to date nanos, milliseconds only
required_capability: date_nanos_type

ROW d = TO_DATE_NANOS("2023-03-23T12:15:03.360") | KEEP d;

d:date_nanos
2023-03-23T12:15:03.360Z
;

string to date nanos, out of range
required_capability: date_nanos_type

ROW d = TO_DATE_NANOS("2262-04-12T00:00:00.000") | KEEP d;
warning:Line 1:9: evaluation of [TO_DATE_NANOS(\"2262-04-12T00:00:00.000\")] failed, treating result as null. Only first 20 failures recorded.
warning:Line 1:9: java.lang.IllegalArgumentException: cannot create nanosecond dates after 2262-04-11T23:47:16.854775807Z

d:date_nanos
null
;

long to date nanos
required_capability: date_nanos_type

ROW d = TO_DATE_NANOS(1724160894123456789) | KEEP d;

d:date_nanos
2024-08-20T13:34:54.123456789Z
;

unsigned long to date nanos
required_capability: date_nanos_type

ROW d = TO_DATE_NANOS(TO_UNSIGNED_LONG(1724160894123456789)) | KEEP d;

d:date_nanos
2024-08-20T13:34:54.123456789Z
;

double to date nanos
required_capability: date_nanos_type

ROW d = TO_DATE_NANOS(1724160894123456789.0) | KEEP d;

d:date_nanos
# Note we've lost some precision here
2024-08-20T13:34:54.123456768Z
;

datetime to date nanos, in range
required_capability: date_nanos_type

ROW d = TO_DATE_NANOS(TO_DATETIME("2024-08-20T13:34:54.123Z")) | KEEP d;

d:date_nanos
2024-08-20T13:34:54.123000000Z
;

datetime to date nanos, with overflow
required_capability: date_nanos_type

ROW d = TO_DATE_NANOS(TO_DATETIME("2262-04-12T00:00:00.000")) | KEEP d; 
warning:Line 1:9: evaluation of [TO_DATE_NANOS(TO_DATETIME(\"2262-04-12T00:00:00.000\"))] failed, treating result as null. Only first 20 failures recorded.
warning:Line 1:9: java.lang.IllegalArgumentException: cannot create nanosecond dates after 2262-04-11T23:47:16.854775807Z

d:date_nanos
null
;
